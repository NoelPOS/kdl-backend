name: Deploy Backend to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
        
    - name: Build application
      run: npm run build

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-backend:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/kdl-app
          
          # Update backend environment variables
          cat > backend.env << EOF
          NODE_ENV=production
          PORT=4000
          DATABASE_ENABLED=true
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=1d
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_REFRESH_EXPIRATION=7d
          THROTTLE_TTL=60
          THROTTLE_LIMIT=100
          SWAGGER_ENABLED=true
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          RESEND_FROM_EMAIL=${{ secrets.RESEND_FROM_EMAIL }}
          EOF
          
          # Stop backend container
          docker compose stop backend
          docker compose rm -f backend
          
          # Remove old image
          docker image rm ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-backend:latest 2>/dev/null || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/kdl-backend:latest
          
          # Start backend container
          docker compose up -d backend
          
          # Wait and check health
          sleep 15
          docker compose logs --tail=20 backend
          
          # Test API health
          curl -f http://localhost:4000/api/health || echo "Health check endpoint not available"
          
          echo "‚úÖ Backend deployment completed!"

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "üéâ Backend deployment successful!"
        else
          echo "‚ùå Backend deployment failed!"
          exit 1
        fi